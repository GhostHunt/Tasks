<s:GridItemRenderer minWidth="21" minHeight="21"
					xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Declarations>
		<!--- The default value of the <code>sortIndicator</code> property.
		It must be an IFactory for an IVisualElement.        
		
		<p>This value is specified in a <code>fx:Declaration</code> block and can be overridden
		by a declaration with <code>id="defaultSortIndicator"</code>
		in an MXML subclass.</p>
		
		@langversion 3.0
		@playerversion Flash 10
		@playerversion AIR 2.0
		@productversion Flex 4.5
		-->
		<fx:Component id="defaultSortIndicator">
			<s:Path data="M 4 7 L 7.5 0 0 0 Z" height="5" width="7" >
				<s:fill>
					<s:SolidColor color="#666666" />
				</s:fill>
			</s:Path>
		</fx:Component>
		
		<s:Label id="labelDisplay" 
				 horizontalCenter="0" verticalCenter="0"  
				 textAlign="start"
				 fontWeight="bold"
				 verticalAlign="middle"
				 maxDisplayedLines="1"
				 showTruncationTip="false" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			
			import spark.components.DataGrid;
			import spark.components.GridColumnHeaderGroup;
			import spark.components.gridClasses.GridColumn;
			
			/**
			 *  @private
			 */
			private function dispatchChangeEvent(type:String):void
			{
				if (hasEventListener(type))
					dispatchEvent(new Event(type));
			}            
			
			//----------------------------------
			//  maxDisplayedLines
			//----------------------------------
			
			private var _maxDisplayedLines:int = 1;
			
			[Bindable("maxDisplayedLinesChanged")]
			[Inspectable(minValue="-1")]
			
			/**
			 *  @copy spark.components.supportClasses.TextBase#maxDisplayedLines   
			 *
			 *  @default 1
			 * 
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4.5
			 */
			public function get maxDisplayedLines():int
			{
				return _maxDisplayedLines;
			}
			
			/**
			 *  @private
			 */
			public function set maxDisplayedLines(value:int):void
			{
				if (value == _maxDisplayedLines)
					return;
				
				_maxDisplayedLines = value;
				if (labelDisplay)
					labelDisplay.maxDisplayedLines = value;
				
				invalidateSize();
				invalidateDisplayList();
				
				dispatchChangeEvent("maxDisplayedLinesChanged");
			}
			
			//----------------------------------
			//  sortIndicator
			//----------------------------------
			
			private var _sortIndicator:IFactory;
			private var sortIndicatorInstance:IVisualElement;
			
			[Bindable("sortIndicatorChanged")]
			
			/**
			 *  An IVisualElement that's displayed when the column is sorted.
			 * 
			 *  @default null
			 * 
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4.5
			 */
			public function get sortIndicator():IFactory
			{
				return (_sortIndicator) ? _sortIndicator : defaultSortIndicator;
			}
			
			/**
			 *  @private
			 */
			public function set sortIndicator(value:IFactory):void
			{
				if (_sortIndicator == value)
					return;
				
				_sortIndicator = value;
				if (sortIndicatorInstance)
				{
					sortIndicatorGroup.includeInLayout = false;
					sortIndicatorGroup.removeElement(sortIndicatorInstance);
					sortIndicatorInstance = null;
				}
				
				invalidateDisplayList();
				dispatchChangeEvent("sortIndicatorChanged");
			}
			
			/**
			 *  @private
			 *  Use prepare method to create and put the sortIndicator into the
			 *  sortIndicatorGroup and the labelDisplay into the labelDisplayGroup.
			 */
			override public function prepare(hasBeenRecycled:Boolean):void
			{
				super.prepare(hasBeenRecycled);
				
				if (labelDisplay && labelDisplayGroup && (labelDisplay.parent != labelDisplayGroup))
					labelDisplayGroup.addElement(labelDisplay);
				
				const column:GridColumn = this.column;
				if (sortIndicator && column && column.grid && column.grid.dataGrid && column.grid.dataGrid.columnHeaderGroup)
				{
					const dataGrid:DataGrid = column.grid.dataGrid;
					const columnHeaderGroup:GridColumnHeaderGroup = dataGrid.columnHeaderGroup;
					
					if (columnHeaderGroup.isSortIndicatorVisible(column.columnIndex))
					{
						if (!sortIndicatorInstance)
						{
							sortIndicatorInstance = sortIndicator.newInstance();
							sortIndicatorGroup.addElement(sortIndicatorInstance);
						}
						sortIndicatorInstance.visible = true;
						sortIndicatorGroup.includeInLayout = true;
						sortIndicatorGroup.scaleY = (column.sortDescending) ? 1 : -1;
					}
					else
					{
						if (sortIndicatorInstance)
						{
							sortIndicatorGroup.removeElement(sortIndicatorInstance);
							sortIndicatorGroup.includeInLayout = false;
							sortIndicatorInstance = null;
						}
					}
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />	
		<s:State name="hovered" />
	</s:states>
	
	<!-- background -->
	<!--<s:Rect left="0" right="0" top="0" bottom="0">
		<s:fill>
			<s:SolidColor color="#FFFFFF" color.normal="#EEEEEE"  />
		</s:fill>
	</s:Rect>-->
	
	<s:VGroup horizontalAlign="justify" height="100%" width="100%" gap="-6">
		<s:Line >
			<s:stroke>
				<s:SolidColorStroke color="#688caf" weight="1" caps="square"/>
			</s:stroke>
		</s:Line>  
		</s:VGroup>
		
		<s:Rect includeIn="normal" left="0" right="0" top="1" bottom="0">
			<s:fill> 
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#f9fcfd" 
									 alpha="0.85" />
					<s:GradientEntry color="#d3dce9" 
									 alpha="0.85" />
				</s:LinearGradient>		
			</s:fill>
		</s:Rect>
		<s:Rect includeIn="hovered" left="0" right="0" top="1" bottom="0">
			<s:fill> 
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#dfe2e4" 
									 alpha="0.85" />
					<s:GradientEntry color="#bdc6d2" 
									 alpha="0.85" />
				</s:LinearGradient>		
			</s:fill>
		</s:Rect>	
	


	 
	<s:HGroup left="7" right="7" top="5" bottom="5" gap="2" verticalAlign="middle">
		
		<!--- Container for labelDisplay:TextBase.  -->		
		<s:Group id="labelDisplayGroup" width="100%" />
		<!--- Container for sortIndicator:IVisualElement.  -->
		<s:Group id="sortIndicatorGroup" includeInLayout="false" />
		
	</s:HGroup>
	
</s:GridItemRenderer>